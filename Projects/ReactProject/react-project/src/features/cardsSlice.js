
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";


/* This code is creating an asynchronous thunk function called `fetchCards` using the
`createAsyncThunk` function from the `@reduxjs/toolkit` library. The `fetchCards` function takes in
a parameter called `chosenOne`, which is used to search for Pokemon cards using the Pokemon TCG API. */
// export const fetchCards = async (chosenOne) => {
//     let response = await fetch(`https://api.pokemontcg.io/v2/cards?q=name:"${chosenOne}"`);
//     let data = await response.json();
//     if (data.data.length > 0) {
//         const cardSources = dataPick(data);
//         console.log(cardSources)
//         return cardSources;
//     } else {
//         let modifiedChosenOne = chosenOne.replace(/-/g, " ");
//         response = await fetch(`https://api.pokemontcg.io/v2/cards?q=name:"${modifiedChosenOne}"`);
//         data = await response.json();
//         if (data.data.length > 0) {
//             const cardSources = dataPick(data);
//             return cardSources;
//         } else {
//             const firstWord = chosenOne.split("-");
//             response = await fetch(`https://api.pokemontcg.io/v2/cards?q=name:"${firstWord}"`);
//             data = await response.json();
//             const cardSources = dataPick(data);
//             console.log(cardSources)
//             return cardSources;
//         }
//     }
// };

// /**
//  * The function takes in an object of data and returns an array of URLs for large images.
//  * @returns The function `imagePick` takes in an object `data` and returns an array of URLs for the
//  * `large` images of each card in the `data` object.
//  */
// export const dataPick = data => {
//     const cardSources = data.data.map(card => card);
//     console.log(cardSources)
//     return cardSources
// }



/* This code is creating a Redux slice called `cardsSlice` using the `createSlice` function from the
`@reduxjs/toolkit` library. The `cardsSlice` slice has an initial state of an empty array `[]` and
no reducers. It also has an `extraReducers` field that listens for the `fulfilled` action of the
`fetchCards` asynchronous thunk function and updates the state of the `cardsSlice` slice with the
payload of the action, which is an array of URLs for large images of Pokemon cards. */
export const cardsSlice = createSlice({
    name: 'Cards',
    initialState: [],
    reducers: {
        addChosenCardsToStore(state, action) {
          return action.payload;
        }
    }
})


  /**
   * This is a selector function that returns the chosen cards from the state.
   */
  export const chosenCards = state => state.Cards;

export const { addChosenCardsToStore } = cardsSlice.actions

/* `export default cardsSlice.reducer;` is exporting the reducer function generated by `createSlice`
for the `cards` slice. This reducer function will handle actions dispatched to the `cards` slice and
update its state accordingly. It can be used in the store configuration to add the `cards` slice to
the overall state of the application. */

  export default cardsSlice.reducer;