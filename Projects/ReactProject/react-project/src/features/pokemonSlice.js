import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

const findAllMons = data => {
  /* `const Mons = Object.keys(data);` is creating an array called `Mons` that contains all the keys
  (property names) of the `data` object. In this case, `data` is the response data from the Pokemon
  API, so `Mons` will contain an array of all the Pokemon names. */
  const allMons = [];
  const limitMons = () => {
    for (let i =0; i < 905; i++){
      let pokemon = data[i].name;
      // pokemon = pokemon.split("-")
      // pokemon = pokemon.shift()
      allMons.push(pokemon);
    }
  }
  limitMons();
  return allMons;
};


/* This code is creating an async thunk called `fetchMons` using the `createAsyncThunk` function from
the `@reduxjs/toolkit` library. The thunk sends a GET request to the Pokemon API to fetch all
Pokemon data with a limit of 100000 and an offset of 0. Once the response is received, it is
converted to JSON format and logged to the console. The `findAllMons` function is then called with
the `results` property of the response data as an argument. Finally, an object containing all the
Pokemon data fetched from the API is returned with a property called `allPokemon` that contains an
array of all the Pokemon names. This thunk can be dispatched to the Redux store to fetch and update
the state of the `pokemon` slice. */
export const fetchMons = createAsyncThunk('pokemon', async () => {
  const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0');
  const data = await response.json();
  const allMons = findAllMons(data.results);
  return {allMons}
});


/* This code is creating a Redux slice called "pokemon" using the `createSlice` function from the
`@reduxjs/toolkit` library. The slice has an initial state of an empty array `[]` and no reducers
defined in the `reducers` object. Instead, it has an `extraReducers` function that listens for the
`fetchMons.fulfilled` action, which is an action dispatched by the `fetchMons` async thunk when it
successfully completes. When this action is dispatched, the `extraReducers` function updates the
state of the slice to be the `payload` property of the action, which is an object containing all the
Pokemon data fetched from the API. */
export const pokemonSlice = createSlice({
  name: 'pokemon',
  initialState: [],
  reducers: {},
  extraReducers(builder) {
    builder.addCase(fetchMons.fulfilled, (state, action) => {
      return action.payload;
    });
  }
})

//allows us to read from this slice of state
/**
 * This function selects the pokemon state from the overall state object.
 */
export const selectMons = state => state.pokemon;

/* `export default pokemonSlice.reducer;` is exporting the reducer function generated by `createSlice`
from this module. This allows other modules to import and use this reducer function to manage the
state of the `pokemon` slice in the Redux store. */
export default pokemonSlice.reducer;